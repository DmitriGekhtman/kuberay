apiVersion: ray.io/v1alpha1
kind: RayCluster
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
    # An unique identifier for the head node and workers of this cluster.
  name: raycluster-mini
spec:
  rayVersion: '$ray_version' # should match the Ray version in the image of the containers
  ######################headGroupSpecs#################################
  # head group template and specs, (perhaps 'group' is not needed in the name)
  headGroupSpec:
    # Kubernetes Service Type, valid values are 'ClusterIP', 'NodePort' and 'LoadBalancer'
    serviceType: ClusterIP
    # the pod replicas in this group typed head (assuming there could be more than 1 in the future)
    replicas: 1
    # the following params are used to complete the ray start: ray start --head --block --redis-port=6379 ...
    rayStartParams:
      dashboard-host: '0.0.0.0'
      block: 'true'
    #pod template
    template:
      metadata:
      spec:
        containers:
        - name: ray-head
          image: $ray_image
          ports:
          - containerPort: 6379
            name: redis
          - containerPort: 8265 # Ray dashboard
            name: dashboard
          - containerPort: 10001
            name: client
  workerGroupSpecs:
    - replicas: 1
      minReplicas: 1
      maxReplicas: 1
      groupName: small-group
      # the following params are used to complete the ray start: ray start --block --node-ip-address= ...
      rayStartParams:
        block: 'true'
      #pod template
      template:
        spec:
          initContainers: # to avoid worker crashing before head service is created
          - name: init-myservice
            image: busybox:1.28
            # Change the cluster postfix if you don't have a default setting
            command: ['sh', '-c', "until nslookup $$RAY_IP.$$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
          containers:
          - name: ray-worker
            image: $ray_image
